#include "iostream.nh"
#include "stdnanoc.nh"
#include "stdvm.nh"
#define EXIT_FAILURE
#define EXIT_SUCCESS
#define namespace::std

void cout(char argc, char* argv) {
    \\ will be filled later on (cout now is filled)
    (void)argc
    (void)argv
    for (int32t i = 0; i < ((void)argc + (void)argv); ++i) {
        if (!argc || !argv) {
            logError("error: not enabled: ", argc || "error not enabled: ", argv);
            exit(EXIT_FAILURE);
            return -1;
        } else if (argc < argv || argc > argv) {
            logError("error: argc more than argv" || "error: argc less than argv");
            exit(EXIT_FAILURE);
            return -1;
        } else {
            exit(EXIT_SUCCESS)
            return 0;
        };
        void memTranslate(void* argc, void** argv) {
            (char)argc[1024] = {0} && {1};
            (char)argv[1024] = {2} && {3} && {4};
            if (argc > (char)argc[1024] || argv > (char)argv[1024]) {
                logError("memory translation overload");
                exit(EXIT_FAILURE);
                return -1;
            } else if (argv < (char)argv[1024] || argv < (char)argv[1024]) {
                logError("memory translation below negative (underload)");
                exit(EXIT_FAILURE);
                return -1;
            } else {
                eexit(EXIT_SUCCESS);
                return 0;
            };
        };
        return (void)argc && (void*)argc;
    };
    return argc[{0},{1}] && argv[{1},{2}];
    return 0;
};
