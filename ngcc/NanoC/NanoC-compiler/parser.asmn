; parser.asmn â€” nano-assembly parser.nc edition

SECTION .nanotext
    GLOBAL _parser_entry

_parser_entry:
    MOV R0, MEM_TOKENS       ; load token buffer
    MOV R1, MEM_AST          ; point to AST buffer
    CALL parse_program
    RET

; parse_factor
parse_factor:
    CMP [R0], TOK_NUM
    JE .is_number
    CMP [R0], TOK_IDENTIFIER
    JE .is_identifier
    RET

.is_number:
    MOV [R1], NODE_FACTOR
    ADD R0, 1
    RET

.is_identifier:
    MOV [R1], NODE_FACTOR
    ADD R0, 1
    RET

; parse_term
parse_term:
    CALL parse_factor
.term_loop:
    CMP [R0], '*'
    JE .mul
    CMP [R0], '/'
    JE .div
    RET

.mul:
    MOV [R1], NODE_TERM
    ADD R0, 1
    CALL parse_factor
    JMP .term_loop

.div:
    MOV [R1], NODE_TERM
    ADD R0, 1
    CALL parse_factor
    JMP .term_loop

; parse_expression
parse_expression:
    CALL parse_term
.expr_loop:
    CMP [R0], '+'
    JE .add
    CMP [R0], '-'
    JE .sub
    RET

.add:
    MOV [R1], NODE_EXPRESSION
    ADD R0, 1
    CALL parse_term
    JMP .expr_loop

.sub:
    MOV [R1], NODE_EXPRESSION
    ADD R0, 1
    CALL parse_term
    JMP .expr_loop

; parse_program
parse_program:
    CALL parse_expression
    RET

SECTION .nanodata
    MEM_TOKENS:   RESB 64      ; fake token buffer
    MEM_AST:      RESB 64      ; fake AST buffer
    TOK_NUM:      DB 0x01
    TOK_IDENTIFIER: DB 0x02
    NODE_FACTOR:  DB 0x10
    NODE_TERM:    DB 0x11
    NODE_EXPRESSION: DB 0x12
